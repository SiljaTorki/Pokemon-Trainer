{"ast":null,"code":"import { HttpHeaders } from \"@angular/common/http\";\nimport { environment } from \"src/environments/environment\";\nimport { of, switchMap } from \"rxjs\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport let RegisterService = /*#__PURE__*/(() => {\n  class RegisterService {\n    //DI - Dependency Injection\n    constructor(http) {\n      this.http = http; //Get Api from enviorments\n\n      this.API_URL = environment.trainerAPI; //Empty Trainer object\n\n      this._trainer = {\n        id: 0,\n        username: \"\",\n        pokemon: []\n      }; //Empty Pokemon array\n\n      this._pokemons = []; //Empty error message \n\n      this.registerError = \"\"; // Method that gets the pokemon information from the pokemon api, pushes the pokemon info to the pokeList as an object\n\n      this.getPokemon = info => {\n        //Empty pokemon object\n        let poke = {\n          pokemonName: '',\n          id: 0,\n          pokemonImg: ''\n        }; //Set name to Pokemon\n\n        poke.pokemonName = info.name; //Set id to Pokemon\n\n        poke.id = parseInt(info.url.slice(34, -1)); //Set utl to Pokemon img\n\n        poke.pokemonImg = `https://raw.githubusercontent.com/PokeAPI/sprites/master/sprites/pokemon/${poke.id}.png`; //Return Pokemon object\n\n        return poke;\n      };\n    } //Header\n\n\n    createHeaders() {\n      return new HttpHeaders({\n        'Content-Type': 'application/json',\n        'x-api-key': 'K48l1LQApkyUkXs52Lbb2Q'\n      });\n    } // Function to register new user \n\n\n    registerTrainer(username) {\n      //Create header with API_KEY\n      const headers = this.createHeaders(); //Create new user\n\n      const trainer = {\n        username,\n        pokemon: []\n      }; // return POST request\n\n      return this.http.post(this.API_URL, trainer, {\n        headers\n      });\n    } //Get a trainer array with username \n\n\n    getTrainer(username) {\n      console.log(`${this.API_URL}?username=${username}`); //GET request\n\n      return this.http.get(`${this.API_URL}?username=${username}`);\n    } //Register trainer with username given by user on login page\n\n\n    register(username, onSuccess) {\n      this.getTrainer(username).pipe( // switch to another observable after complete the others complete\n      switchMap(trainer => {\n        //check the length of trainer array\n        if (trainer.length) {\n          return of(trainer[0]);\n        } //register trainer with username \n\n\n        return this.registerTrainer(username);\n      })).subscribe({\n        next: trainer => {\n          if (trainer) {\n            //set new trainer\n            this._trainer = trainer; // Store trainer local\n\n            localStorage.setItem('trainer-user', JSON.stringify(this._trainer)); //Successfull -> redirect to next page\n\n            onSuccess();\n          }\n        },\n        //Handle error\n        error: error => {\n          this.registerError = error.message;\n        }\n      });\n    } //Method that gets trainer info from local storrage\n\n\n    getLocalTrainer() {\n      var _a;\n\n      const storedTrainer = (_a = localStorage.getItem('trainer-user')) !== null && _a !== void 0 ? _a : \"\"; //If trainer found in local storrage\n\n      if (storedTrainer) {\n        //Parse to JSON\n        const json = JSON.parse(storedTrainer); //Set trainer to trainer found in local storrage\n\n        this._trainer = json;\n      } //Return trainer from local\n\n\n      return this._trainer;\n    }\n\n    addPokemon(username, pokemonName) {\n      this.getTrainer(username).subscribe(response => {\n        // Get trainer from local storrage\n        this._trainer = this.getLocalTrainer(); //Sets pokemol list with pokemonlist from localstorage\n\n        this._pokemons = this._trainer.pokemon; //Store colected pokemon\n\n        let pokemon = pokemonName; //Add new pokemon to trainer\n\n        this._pokemons.push(pokemon); //Update local storrage for user\n\n\n        localStorage.setItem('trainer-user', JSON.stringify(this._trainer)); //Stroe pokemons in session\n\n        sessionStorage.setItem('pokemons', JSON.stringify(this._pokemons));\n      });\n    }\n\n    deletePokemon(username, pokemonName) {\n      this.getTrainer(username).subscribe(response => {\n        // Get trainer from local storrage\n        this._trainer = this.getLocalTrainer();\n        let pokemon = pokemonName; //Sets pokemon list with pokemonlist from localstorage\n\n        this._pokemons = this._trainer.pokemon; //Check all pokemons in pokemon list from local\n\n        for (let i = 0; i < this._pokemons.length; i++) {\n          //If match, remove pokemon from list\n          if (this._pokemons[i] === pokemon) {\n            //Removes pokemon from an array and inserts another pokemon in their place\n            this._pokemons.splice(i, 1);\n          }\n        } //Update local storrage\n\n\n        localStorage.setItem('trainer-user', JSON.stringify(this._trainer)); //Stroe pokemons in session\n\n        sessionStorage.setItem('pokemons', JSON.stringify(this._pokemons)); //Update view\n\n        window.location.reload();\n      });\n    }\n\n  }\n\n  RegisterService.ɵfac = function RegisterService_Factory(t) {\n    return new (t || RegisterService)(i0.ɵɵinject(i1.HttpClient));\n  };\n\n  RegisterService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: RegisterService,\n    factory: RegisterService.ɵfac,\n    providedIn: 'root'\n  });\n  return RegisterService;\n})();","map":null,"metadata":{},"sourceType":"module"}